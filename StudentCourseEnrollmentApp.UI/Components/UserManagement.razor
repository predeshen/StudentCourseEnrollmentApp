@using StudentCourseEnrollmentApp.Core.Application.DTOs
@using StudentCourseEnrollmentApp.UI.Services
@using StudentCourseEnrollmentApp.Core.Application.Interfaces
@inject IAdminService AdminService

<div class="card">
    <div class="card-header">
        <h3>User Management</h3>
        <button class="btn btn-primary" @onclick="ShowCreateForm">Add New User</button>
    </div>
    <div class="card-body">
        @if (showCreateForm)
        {
            <div class="row mb-4">
                <div class="col-12">
                    <h4>@(editingUser != null ? "Edit User" : "Create New User")</h4>
                    <form @onsubmit="HandleSubmit">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="firstName">First Name</label>
                                    <input type="text" class="form-control" id="firstName" @bind="userForm.FirstName" required />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="lastName">Last Name</label>
                                    <input type="text" class="form-control" id="lastName" @bind="userForm.LastName" required />
                                </div>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="email">Email</label>
                                    <input type="email" class="form-control" id="email" @bind="userForm.Email" required />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="password">Password</label>
                                    <input type="password" class="form-control" id="password" @bind="userForm.Password" disabled="@(editingUser != null)" required="@(editingUser == null)" />
                                    @if (editingUser != null)
                                    {
                                        <small class="form-text text-muted">Leave blank to keep current password</small>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-12">
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="isSuperAdmin" @bind="userForm.IsSuperAdmin" />
                                    <label class="form-check-label" for="isSuperAdmin">
                                        Super Admin
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-12">
                                <button type="submit" class="btn btn-success me-2">@(editingUser != null ? "Update User" : "Create User")</button>
                                <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        }

        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Role</th>
                        <th>Created</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in users)
                    {
                        <tr>
                            <td>@user.FirstName @user.LastName</td>
                            <td>@user.Email</td>
                            <td>
                                @if (user.IsSuperAdmin)
                                {
                                    <span class="badge bg-danger">Super Admin</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">Student</span>
                                }
                            </td>
                            <td>@user.CreatedAt.ToString("MMM dd, yyyy")</td>
                            <td>
                                <button class="btn btn-sm btn-warning me-2" @onclick="() => EditUser(user)">Edit</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteUser(user.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private List<ApplicationUserDTO> users = new();
    private bool showCreateForm = false;
    private ApplicationUserDTO? editingUser = null;
    private CreateUserDTO userForm = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            users = (await AdminService.GetAllUsersAsync()).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
        }
    }

    private void ShowCreateForm()
    {
        showCreateForm = true;
        editingUser = null;
        userForm = new CreateUserDTO();
    }

    private void EditUser(ApplicationUserDTO user)
    {
        editingUser = user;
        userForm = new CreateUserDTO
        {
            FirstName = user.FirstName,
            LastName = user.LastName,
            Email = user.Email,
            Password = "", // Don't populate password
            IsSuperAdmin = user.IsSuperAdmin
        };
        showCreateForm = true;
    }

    private void CancelEdit()
    {
        showCreateForm = false;
        editingUser = null;
        userForm = new CreateUserDTO();
    }

    private async Task HandleSubmit()
    {
        try
        {
            if (editingUser != null)
            {
                var updateDto = new UpdateUserDTO
                {
                    UserId = editingUser.Id,
                    FirstName = userForm.FirstName,
                    LastName = userForm.LastName,
                    Email = userForm.Email,
                    IsSuperAdmin = userForm.IsSuperAdmin
                };
                await AdminService.UpdateUserAsync(updateDto);
            }
            else
            {
                var result = await AdminService.CreateUserAsync(userForm);
                Console.WriteLine($"User created successfully: {result.Email}");
            }

            await LoadUsers();
            CancelEdit();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving user: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }

    private async Task DeleteUser(string userId)
    {
        if (await AdminService.DeleteUserAsync(userId))
        {
            await LoadUsers();
        }
        else
        {
            Console.WriteLine("Failed to delete user. They may have enrollments.");
        }
    }
}
